apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def verName = "7.2.1-rc09"
def verCode = 116

def serviceAccountCredentialsFile = rootProject.file("service_account_credentials.json")

def beta = verName.contains("preview")

if (serviceAccountCredentialsFile.isFile()) {

    setupPlay(beta)

    play.serviceAccountCredentials = serviceAccountCredentialsFile

} else if (System.getenv().containsKey("ANDROID_PUBLISHER_CREDENTIALS")) {

    setupPlay(beta)

}

void setupPlay(boolean beta) {

    apply plugin: 'com.github.triplet.play'

    play {

        track = beta ? "beta" : "production"
        defaultToAppBundles = true

    }

}

configurations {
    compile.exclude module: 'support-v4'
}

def okHttpVersion = '4.9.0'
def fcmVersion = '21.0.0'
def crashlyticsVersion = '17.3.0'
def playCoreVersion = '1.8.3'

repositories {

    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.5.0-alpha05'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.3.1'
    implementation "androidx.interpolator:interpolator:1.0.0"
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.sharetarget:sharetarget:1.0.0"

    // replace zxing with latest
    // TODO: fix problem with android L
    implementation 'com.google.zxing:core:3.4.1'

    compileOnly 'org.checkerframework:checker-qual:3.7.0'
    compileOnly 'org.checkerframework:checker-compat-qual:2.5.5'

    // don't change this :)
    //noinspection GradleDependency
    implementation 'com.googlecode.mp4parser:isoparser:1.0.6'

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.osmdroid:osmdroid-android:6.1.8'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.20'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'

    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:okhttp-dnsoverhttps:$okHttpVersion"
    implementation 'dnsjava:dnsjava:3.3.1'
    implementation 'org.dizitart:nitrite:3.4.2'

    implementation 'cn.hutool:hutool-core:5.5.1'
    implementation 'cn.hutool:hutool-crypto:5.5.1'

    implementation project(":openpgp-api")

    compileOnly files('libs/libv2ray.aar')

    compileOnly "com.google.firebase:firebase-messaging:$fcmVersion"
    compileOnly "com.google.firebase:firebase-crashlytics:$crashlyticsVersion"
    compileOnly "com.google.android.play:core:$playCoreVersion"

    releaseImplementation "com.google.firebase:firebase-messaging:$fcmVersion"
    releaseImplementation "com.google.firebase:firebase-crashlytics:$crashlyticsVersion"
    releaseImplementation "com.google.android.play:core:$playCoreVersion"

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.1'

}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'
    ndkVersion rootProject.ext.ndkVersion

    defaultConfig.applicationId = "nekox.messenger"

    defaultConfig {
        minSdkVersion 16
        //noinspection ExpiredTargetSdkVersion,OldTargetApi
        targetSdkVersion 28

        versionName verName
        versionCode verCode

        def appId = null
        def appHash = null

        //obtain your own keys at https://core.telegram.org/api/obtaining_api_id

        if (project.rootProject.file('local.properties').exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            appId = properties.getProperty("TELEGRAM_APP_ID") ?: System.getenv("TELEGRAM_APP_ID")
            appHash = properties.getProperty("TELEGRAM_APP_HASH") ?: System.getenv("TELEGRAM_APP_HASH")
        }

        buildConfigField 'int', 'APP_ID', appId != null ? appId : "1391584"
        buildConfigField 'String', 'APP_HASH', "\"" + (appHash != null ? appHash : "355c91550b0d658cfb7ff89dcf91a08c") + "\""

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16', "-j=16"
            }
        }

    }

    bundle {
        language {
            enableSplit = false
        }
    }

    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    packagingOptions {

        exclude '/fabric/**'
        exclude '/META-INF/*.version'
        exclude '/META-INF/*.kotlin_module'
        exclude '/builddef.lst'
        exclude '/*.txt'

    }

    dexOptions {
        jumboMode = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    signingConfigs {
        def keystorePwd = null
        def alias = null
        def pwd = null
        Properties properties

        if (project.rootProject.file('local.properties').exists()) {
            properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        } else {
            def base64 = System.getenv("LOCAL_PROPERTIES")
            if (base64 != null && !base64.isBlank()) {
                properties = new Properties()
                properties.load(new ByteArrayInputStream(Base64.decoder.decode(base64)))
            }
        }

        if (properties != null) {
            keystorePwd = properties.getProperty("KEYSTORE_PASS")
            alias = properties.getProperty("ALIAS_NAME")
            pwd = properties.getProperty("ALIAS_PASS")
        }

        keystorePwd = keystorePwd ?: System.getenv("KEYSTORE_PASS")
        alias = alias ?: System.getenv("ALIAS_NAME")
        pwd = pwd ?: System.getenv("ALIAS_PASS")

        release {

            storeFile project.file('release.keystore')
            storePassword keystorePwd
            keyAlias alias
            keyPassword pwd
        }

    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            multiDexEnabled true
        }

        releaseNoGcm {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
            signingConfig signingConfigs.release
        }

        release {
            isDefault true
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
            signingConfig signingConfigs.release
        }

        foss {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
        }
    }

    sourceSets {

        main {
            jni.srcDirs = []
        }

        debug {
            jniLibs.srcDir 'src/main/libs'
        }

        releaseNoGcm {
            jniLibs.srcDir 'src/main/libs'
        }

        release {
            jniLibs.srcDir 'src/main/libs'
            manifest.srcFile 'src/gservcies/AndroidManifest.xml'
        }

        foss {
            jni.srcDirs = ['./jni/']
        }

    }

    splits.abi {

        enable true
        universalApk false

    }

    flavorDimensions "version"

    productFlavors {
        mini {
            versionNameSuffix '-mini'
        }
        miniNoEmoji {
            versionNameSuffix '-mini-no-emoji'
        }
        miniAppleEmoji {
            versionNameSuffix '-mini-apple-emoji'
        }
        miniTwitterEmoji {
            versionNameSuffix '-mini-twitter-emoji'
        }
        full {
            isDefault true
        }
        fullPlay {
            versionNameSuffix '-play'
            versionCode verCode - 1
        }
        fullNoEmoji {
            versionNameSuffix '-full-no-emoji'
        }
        fullAppleEmoji {
            versionNameSuffix '-full-apple-emoji'
        }
        fullTwitterEmoji {
            versionNameSuffix '-full-twitter-emoji'
        }
    }

    sourceSets.all { set ->
        if (set.name.startsWith("full")) {
            set.dependencies {
                implementation files('libs/libv2ray.aar', 'libs/ss-rust-release.aar', 'libs/ssr-libev-release.aar')
            }
        }
        if (set.name.matches("(mini|full).*")) {
            if (set.name.contains("Apple")) {
                set.assets.srcDirs = ["src/main/assets", "src/emojis/apple"]
            } else if (set.name.contains("Twitter")) {
                set.assets.srcDirs = ["src/main/assets", "src/emojis/twitter"]
            } else if (!set.name.contains("NoEmoji")) {
                set.assets.srcDirs = ["src/main/assets", "src/emojis/blob"]
            }
        }
    }

    tasks.all { task ->
        if (((task.name.endsWith('Ndk') || task.name.startsWith('generateJsonModel') || task.name.startsWith('externalNativeBuild'))) && !task.name.contains("Foss")) {
            task.enabled = false
        }
        if (task.name.contains("uploadCrashlyticsMappingFile")) {
            enabled = false
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = outputFileName.replace("TMessagesProj", "NekoX")
        }
    }

}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {

    tasks.all { task ->
        if (task.name.startsWith('uploadCrashlyticsMappingFile')) {
            task.enabled = false
        } else if (((task.name.contains('Crashlytics'))) && !task.name.endsWith("Release")) {
            task.enabled = false
        } else if (((task.name.endsWith('GoogleServices'))) && !task.name.endsWith("ReleaseGoogleServices")) {
            task.enabled = false
        }
    }

}
